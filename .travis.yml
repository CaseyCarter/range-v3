# Copyright Louis Dionne 2013-2016
# Copyright Gonzalo BG 2014-2017
# Copyright Julian Becker 2015
# Copyright Manu SÃ¡nchez 2015
# Copyright Casey Carter 2015-2017
# Copyright Eric Niebler 2015-2016
# Copyright Paul Fultz II 2015-2016
# Copyright Jakub Szuppe 2016

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at http://boost.org/LICENSE_1_0.txt)

# Adapted from various sources, including:
# - Louis Dionne's Hana: https://github.com/ldionne/hana
# - Paul Fultz II's FIT: https://github.com/pfultz2/Fit

dist: trusty
sudo: true
language: cpp
script: cmake

env:
  global:
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
    - BOOST_VERSION=1_63_0
    - BOOST_URL=http://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz
    - CMAKE_VERSION=3.9.1
    - CMAKE_URL=https://cmake.org/files/v3.9/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz

matrix:
  include:
    # clang 3.7 C++11/14 Release libc++
    - env: CLANG_VERSION=3.7 BUILD_TYPE=Release CPP=11 LIBCXX=On
      os: linux
      addons: &clang37
        apt:
          packages:
            - clang-3.7
            - g++-5
            - valgrind
          sources:
            - ubuntu-toolchain-r-test

    - env: CLANG_VERSION=3.7 BUILD_TYPE=Release CPP=14 LIBCXX=On HEADERS=On
      os: linux
      addons: *clang37

    # clang 6 C++11/14/1z Debug/Release-ASAN libc++, 11 Debug libstdc++
    - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=11 LIBCXX=On
      os: linux
      addons: &clang6
        apt:
          packages:
            - clang-6.0
            - g++-7
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main'
              key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=11 ASAN=On LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=14 LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=14 ASAN=On LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=1z LIBCXX=On HEADERS=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=1z ASAN=On LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=11
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=1z MSAN=On LIBCXX=On CLANG_MODULES=On
      os: linux
      addons: *clang6

# Install dependencies
before_install:
  - export CHECKOUT_PATH=`pwd`
  - |
    set -e
    if [ $TRAVIS_OS_NAME == osx ]; then
      brew update
      brew install valgrind
      brew install gnu-sed --with-default-names
      brew install gnu-which --with-default-names
      brew ls --version cmake &>/dev/null || brew install cmake
    elif [ $TRAVIS_OS_NAME == linux ]; then
      mkdir -p ${DEPS_DIR}/cmake-${CMAKE_VERSION}
      travis_retry wget --no-check-certificate --quiet -O - $CMAKE_URL | tar -xzf - -C ${DEPS_DIR}/cmake-${CMAKE_VERSION} --strip-components=1
      export PATH="${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}"
    fi
  - |
    set -e
    if [ -n "$CLANG_VERSION" ]; then
      export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"
    elif [ -n "$GCC_VERSION" ]; then
      export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"
    fi
  - which $CXX
  - which $CC
  - which valgrind
  - $CXX --version
  - cmake --version
  - |
    set -e
    if [ "$ASAN" == On ]; then
      export SANITIZER="Address;Undefined"
    elif [ "$MSAN" == On ]; then
      export SANITIZER="MemoryWithOrigins"
    fi
  - |
    set -e
    if [ -n "$CLANG_VERSION" ]; then
      LIBCXX_PREFIX="${DEPS_DIR}/libcxx"
      ./install_libcxx.sh $CLANG_VERSION $LIBCXX_PREFIX
    fi

  # Download and install Boost
  # Adapted from Boost.Compute (under the Boost License)
  # Copyright Jakub Szuppe 2016.
  - |
    set -e
    if [ $TRAVIS_OS_NAME == linux -a "${BOOST}" == On ]; then
      if [ ! -f "${DEPS_DIR}/boost/${BOOST_VERSION}_cached" ]; then
        # create dirs for source and install
        mkdir -p ${DEPS_DIR}/boost ${DEPS_DIR}/boost${BOOST_VERSION}
        rm -rf ${DEPS_DIR}/boost/*
        # download
        travis_retry wget --no-check-certificate --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xzf - -C ${DEPS_DIR}/boost${BOOST_VERSION}
        pushd ${DEPS_DIR}/boost${BOOST_VERSION}
        # configure and install
        ./bootstrap.sh --prefix=${DEPS_DIR}/boost/ --with-libraries=program_options,date_time
        ./b2 toolset=clang cxxflags="-stdlib=libc++ -nostdinc++ -cxx-isystem ${LIBCXX_PREFIX}/include/c++/v1/" linkflags="-stdlib=libc++ -L ${LIBCXX_PREFIX}/lib -Wl,-rpath,${LIBCXX_PREFIX}/lib"
        ./b2 -d0 install
        popd
        touch ${DEPS_DIR}/boost/${BOOST_VERSION}_cached
      else
        echo 'Using cached Boost ${BOOST_VERSION} libraries.'
      fi
    fi

install:
  - cd $CHECKOUT_PATH

  # Workaround for valgrind bug: https://bugs.kde.org/show_bug.cgi?id=326469.
  # It is fixed in valgrind 3.10 so this won't be necessary if someone
  # replaces the current valgrind (3.7) with valgrind-3.10
  - |
    set -e
    if [ $BUILD_TYPE == Release -a "$ASAN" != On -a "$MSAN" != On ]; then
      USE_VALGRIND=On
      sed -i 's/march=native/msse4.2/' cmake/ranges_flags.cmake
    fi

  - mkdir -p build
  - cd build
  - |
    set -e
    if [ "$LIBCXX" == On ]; then
      CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -nostdinc++ -cxx-isystem ${LIBCXX_PREFIX}/include/c++/v1/ -Wno-unused-command-line-argument"
      CXX_LINKER_FLAGS="${CXX_LINKER_FLAGS} -lc++abi -L ${LIBCXX_PREFIX}/lib -Wl,-rpath,${LIBCXX_PREFIX}/lib"
      # Required to test the C++ compiler since libc++ is compiled with ASan enabled:
      if [ -n "$CLANG_VERSION" -a "$ASAN" == On ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=address"; fi
      # Required to test the C++ compiler since libc++ is compiled with MSan enabled:
      if [ -n "$CLANG_VERSION" -a "$MSAN" == On ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=memory"; fi
    fi
  - if [ "$HEADERS" == On ]; then NO_HEADER_CHECK=0; else NO_HEADER_CHECK=1; fi
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CXX_LINKER_FLAGS}" -DRANGES_CXX_STD=$CPP -DRANGE_V3_NO_HEADER_CHECK=$NO_HEADER_CHECK -DRANGES_VERBOSE_BUILD=On -DRANGES_ASAN=$ASAN -DRANGES_MSAN=$MSAN -Wdev
  - cat CMakeFiles/CMakeError.log
  - cat CMakeFiles/CMakeOutput.log
  - |
    set -e
    if [ "$BOOST" == On ]; then
      export LD_LIBRARY_PATH=$DEPS_DIR/boost/lib:$LD_LIBRARY_PATH
      cmake .. -DRANGES_BUILD_CALENDAR_EXAMPLE=On -DBOOST_ROOT=${DEPS_DIR}/boost
    fi
  - if [ "$CLANG_MODULES" == On -a "$LIBCXX" == On ]; then cmake .. -DRANGES_MODULES=On -DRANGES_LIBCXX_MODULE="${LIBCXX_PREFIX}/include/c++/v1/module.modulemap"; fi
  - make -j2 VERBOSE=1

script:
  - if [ "$USE_VALGRIND" == On ]; then CTEST_FLAGS="-D ExperimentalMemCheck"; fi
  - ctest -j2 -VV ${CTEST_FLAGS}

notifications:
  email: false
